"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Passthrough = exports.getDiscriminatorModelForClass = exports.deleteModelWithClass = exports.deleteModel = exports.addModelToTypegoose = exports.buildSchema = exports.getModelWithString = exports.getModelForClass = exports.PropType = exports.Severity = exports.getName = exports.getClass = exports.types = exports.errors = exports.defaultClasses = exports.LogLevels = exports.setLogLevel = exports.setGlobalOptions = exports.mongoose = void 0;
const tslib_1 = require("tslib");
/* imports */
const mongoose = require("mongoose");
exports.mongoose = mongoose;
require("reflect-metadata");
const semver = require("semver");
const utils_1 = require("./internal/utils");
// using "typeof process", because somehow js gives a ReferenceError when using "process === undefined" in browser
/* istanbul ignore next */
if (typeof process !== 'undefined' && !(0, utils_1.isNullOrUndefined)(process?.version) && !(0, utils_1.isNullOrUndefined)(mongoose?.version)) {
    // for usage on client side
    /* istanbul ignore next */
    if (semver.lt(mongoose?.version, '8.4.0')) {
        throw new Error(`Please use mongoose 8.4.0 or higher (Current mongoose: ${mongoose.version}) [E001]`);
    }
    /* istanbul ignore next */
    if (semver.lt(process.version.slice(1), '16.20.1')) {
        throw new Error('You are using a NodeJS Version below 16.20.1, Please Upgrade! [E002]');
    }
}
const globalOptions_1 = require("./globalOptions");
Object.defineProperty(exports, "setGlobalOptions", { enumerable: true, get: function () { return globalOptions_1.setGlobalOptions; } });
const constants_1 = require("./internal/constants");
const data_1 = require("./internal/data");
const schema_1 = require("./internal/schema");
const logSettings_1 = require("./logSettings");
const typeguards_1 = require("./typeguards");
const errors_1 = require("./internal/errors");
var logSettings_2 = require("./logSettings");
Object.defineProperty(exports, "setLogLevel", { enumerable: true, get: function () { return logSettings_2.setLogLevel; } });
Object.defineProperty(exports, "LogLevels", { enumerable: true, get: function () { return logSettings_2.LogLevels; } });
tslib_1.__exportStar(require("./prop"), exports);
tslib_1.__exportStar(require("./hooks"), exports);
tslib_1.__exportStar(require("./plugin"), exports);
tslib_1.__exportStar(require("./indexes"), exports);
tslib_1.__exportStar(require("./searchIndexes"), exports);
tslib_1.__exportStar(require("./modelOptions"), exports);
tslib_1.__exportStar(require("./queryMethod"), exports);
tslib_1.__exportStar(require("./typeguards"), exports);
exports.defaultClasses = require("./defaultClasses");
exports.errors = require("./internal/errors");
exports.types = require("./types");
var utils_2 = require("./internal/utils");
Object.defineProperty(exports, "getClass", { enumerable: true, get: function () { return utils_2.getClass; } });
Object.defineProperty(exports, "getName", { enumerable: true, get: function () { return utils_2.getName; } });
var constants_2 = require("./internal/constants");
Object.defineProperty(exports, "Severity", { enumerable: true, get: function () { return constants_2.Severity; } });
Object.defineProperty(exports, "PropType", { enumerable: true, get: function () { return constants_2.PropType; } });
(0, globalOptions_1.parseENV)(); // call this before anything to ensure they are applied
/**
 * Build a Model From a Class
 * @param cl The Class to build a Model from
 * @param options Overwrite Options, like for naming or general SchemaOptions the class gets compiled with
 * @returns The finished Model
 * @public
 * @example
 * ```ts
 * class ClassName {}
 *
 * const NameModel = getModelForClass(ClassName);
 * ```
 */
function getModelForClass(cl, options) {
    (0, utils_1.assertionIsClass)(cl);
    const rawOptions = typeof options === 'object' ? options : {};
    const overwriteNaming = (0, utils_1.mapModelOptionsToNaming)(rawOptions); // use "rawOptions" instead of "mergedOptions" to consistently differentiate between classes & models
    const mergedOptions = (0, utils_1.getMergedModelOptions)(rawOptions, cl);
    const name = (0, utils_1.getName)(cl, overwriteNaming);
    if ((0, utils_1.isCachingEnabled)(mergedOptions.options?.disableCaching) && data_1.models.has(name)) {
        return data_1.models.get(name);
    }
    const modelFn = mergedOptions?.existingConnection?.model.bind(mergedOptions.existingConnection) ??
        mergedOptions?.existingMongoose?.model.bind(mergedOptions.existingMongoose) ??
        mongoose.model.bind(mongoose);
    const compiledModel = modelFn(name, buildSchema(cl, mergedOptions));
    return addModelToTypegoose(compiledModel, cl, {
        existingMongoose: mergedOptions?.existingMongoose,
        existingConnection: mergedOptions?.existingConnection,
        disableCaching: mergedOptions.options?.disableCaching,
    });
}
exports.getModelForClass = getModelForClass;
/**
 * Get Model from internal cache
 * @param key Model's name key
 * @example
 * ```ts
 * class ClassName {}
 * getModelForClass(ClassName); // build the model
 * const NameModel = getModelWithString<typeof ClassName>("ClassName");
 * ```
 */
function getModelWithString(key) {
    (0, utils_1.assertion)(typeof key === 'string', () => new errors_1.ExpectedTypeError('key', 'string', key));
    (0, utils_1.assertion)((0, utils_1.isGlobalCachingEnabled)(), () => new errors_1.CacheDisabledError('getModelWithString'));
    return data_1.models.get(key);
}
exports.getModelWithString = getModelWithString;
/**
 * Generates a Mongoose schema out of class props, iterating through all parents
 * @param cl The Class to build a Schema from
 * @param options Overwrite Options, like for naming or general SchemaOptions the class gets compiled with
 * @returns Returns the Build Schema
 * @example
 * ```ts
 * class ClassName {}
 * const NameSchema = buildSchema(ClassName);
 * const NameModel = mongoose.model("Name", NameSchema);
 * ```
 */
function buildSchema(cl, options) {
    (0, utils_1.assertionIsClass)(cl);
    const overwriteNaming = (0, utils_1.mapModelOptionsToNaming)(options);
    logSettings_1.logger.debug('buildSchema called for "%s"', (0, utils_1.getName)(cl, overwriteNaming));
    // dont re-run the merging if already done so before (like in getModelForClass)
    const mergedOptions = (0, utils_1.getMergedModelOptions)(options, cl);
    let sch = undefined;
    /** Parent Constructor */
    let parentCtor = Object.getPrototypeOf(cl.prototype).constructor;
    /* This array is to execute from lowest class to highest (when extending) */
    const parentClasses = [];
    /** Options for the next lower class that gets unshifted to {@link parentClasses} (ie the super-class) */
    let superOptions = {};
    // first run for some options based on input class options (if any), because the while-loop is for the prototypes (if any)
    {
        // get new options because "mergedOptions" is merged with lower options, but "upperOptions" requires the "own" version, if any
        const mergedOwnOptions = (0, utils_1.getMergedModelOptions)(options, cl, true);
        applySuperOptions(superOptions, mergedOwnOptions);
    }
    // iterate trough all parents to the lowest class
    while (parentCtor?.name !== 'Object') {
        // add lower classes (when extending) to the front of the array to be processed first
        parentClasses.unshift([parentCtor, superOptions]);
        // clone object, because otherwise it will affect the upper classes too because the same reference is used
        superOptions = { ...superOptions };
        {
            // only get the own metadata, possible because "upperOptions" at the moment only requires the "own" metadata
            const ropt = Reflect.getOwnMetadata(constants_1.DecoratorKeys.ModelOptions, parentCtor) ?? {};
            applySuperOptions(superOptions, ropt);
        }
        // set next parent
        parentCtor = Object.getPrototypeOf(parentCtor.prototype).constructor;
    }
    // iterate and build class schemas from lowest to highest (when extending classes, the lower class will get build first) see https://github.com/typegoose/typegoose/pull/243
    for (const [parentClass, extraOptions] of parentClasses) {
        // extend schema
        sch = (0, schema_1._buildSchema)(parentClass, sch, mergedOptions, false, undefined, extraOptions);
    }
    // get schema of current model
    sch = (0, schema_1._buildSchema)(cl, sch, mergedOptions, true, overwriteNaming);
    return sch;
}
exports.buildSchema = buildSchema;
/**
 * Apply options to "superOptions" object, based on "modelOptions"
 * @param superOptions The "superOptions" object
 * @param modelOptions The Model Options of the current class
 */
function applySuperOptions(superOptions, modelOptions) {
    // only affect options of lower classes, not the class the options are from
    if (modelOptions.options?.disableLowerIndexes) {
        superOptions.buildIndexes = false;
    }
}
/**
 * Add a Class-Model Pair to the Typegoose Cache
 * This can be used to add custom Models to Typegoose, with the type information of "cl"
 * Note: no guarrantee that the type information is fully correct when used manually
 * @param model The Model to store
 * @param cl The Class to store
 * @param options Overwrite existingMongoose or existingConnection
 * @example
 * ```ts
 * class ClassName {}
 *
 * const schema = buildSchema(ClassName);
 * // modifications to the schema can be done
 * const model = addModelToTypegoose(mongoose.model("Name", schema), ClassName);
 * ```
 */
function addModelToTypegoose(model, cl, options) {
    const mongooseModel = options?.existingMongoose?.Model || options?.existingConnection?.base?.Model || mongoose.Model;
    (0, utils_1.assertion)(model.prototype instanceof mongooseModel, new errors_1.NotValidModelError(model, 'addModelToTypegoose.model'));
    (0, utils_1.assertionIsClass)(cl);
    // only check cache after the above checks, just to make sure they run
    if (!(0, utils_1.isCachingEnabled)(options?.disableCaching)) {
        logSettings_1.logger.info('Caching is not enabled, skipping adding');
        return model;
    }
    const name = model.modelName;
    (0, utils_1.assertion)(!data_1.models.has(name), new errors_1.FunctionCalledMoreThanSupportedError('addModelToTypegoose', 1, `This was caused because the model name "${name}" already exists in the typegoose-internal "models" cache`));
    if (data_1.constructors.get(name)) {
        logSettings_1.logger.info('Class "%s" already existed in the constructors Map', name);
    }
    data_1.models.set(name, model);
    data_1.constructors.set(name, cl);
    return data_1.models.get(name);
}
exports.addModelToTypegoose = addModelToTypegoose;
/**
 * Deletes a existing model so that it can be overwritten with another model
 * (deletes from mongoose.connection and typegoose models cache and typegoose constructors cache)
 * @param name The Model's mongoose name
 * @example
 * ```ts
 * class ClassName {}
 * const NameModel = getModelForClass(ClassName);
 * deleteModel("ClassName");
 * ```
 */
function deleteModel(name) {
    (0, utils_1.assertion)(typeof name === 'string', () => new errors_1.ExpectedTypeError('name', 'string', name));
    (0, utils_1.assertion)((0, utils_1.isGlobalCachingEnabled)(), () => new errors_1.CacheDisabledError('deleteModelWithClass'));
    logSettings_1.logger.debug('Deleting Model "%s"', name);
    const model = data_1.models.get(name);
    if (!(0, utils_1.isNullOrUndefined)(model)) {
        model.db.deleteModel(name);
    }
    data_1.models.delete(name);
    data_1.constructors.delete(name);
}
exports.deleteModel = deleteModel;
/**
 * Delete a model, with the given class
 * Same as "deleteModel", only that it can be done with the class instead of the name
 * @param cl The Class to delete the model from
 * @example
 * ```ts
 * class ClassName {}
 * const NameModel = getModelForClass(ClassName);
 * deleteModelWithClass(ClassName);
 * ```
 */
function deleteModelWithClass(cl) {
    (0, utils_1.assertionIsClass)(cl);
    (0, utils_1.assertion)((0, utils_1.isGlobalCachingEnabled)(), () => new errors_1.CacheDisabledError('deleteModelWithClass'));
    let name = (0, utils_1.getName)(cl);
    if (!data_1.models.has(name)) {
        logSettings_1.logger.debug(`Class "${name}" is not in "models", trying to find in "constructors"`);
        let found = false;
        // type "Map" does not have a "find" function, and using "get" would maybe result in the incorrect values
        for (const [cname, constructor] of data_1.constructors) {
            if (constructor === cl) {
                logSettings_1.logger.debug(`Found Class in "constructors" with class name "${name}" and entered name "${cname}""`);
                name = cname;
                found = true;
            }
        }
        if (!found) {
            logSettings_1.logger.debug(`Could not find class "${name}" in constructors`);
            return;
        }
    }
    return deleteModel(name);
}
exports.deleteModelWithClass = deleteModelWithClass;
function getDiscriminatorModelForClass(from, cl, value_or_options, options) {
    (0, utils_1.assertion)((0, typeguards_1.isModel)(from), new errors_1.NotValidModelError(from, 'getDiscriminatorModelForClass.from'));
    (0, utils_1.assertionIsClass)(cl);
    const value = typeof value_or_options === 'string' ? value_or_options : undefined;
    const rawOptions = typeof value_or_options !== 'string' ? value_or_options : typeof options === 'object' ? options : {};
    const overwriteNaming = (0, utils_1.mapModelOptionsToNaming)(rawOptions); // use "rawOptions" instead of "mergedOptions" to consistently differentiate between classes & models
    const mergedOptions = (0, utils_1.getMergedModelOptions)(rawOptions, cl);
    const name = (0, utils_1.getName)(cl, overwriteNaming);
    if ((0, utils_1.isCachingEnabled)(mergedOptions.options?.disableCaching) && data_1.models.has(name)) {
        return data_1.models.get(name);
    }
    if (mergedOptions.existingConnection && mergedOptions.existingConnection !== from.db) {
        (0, utils_1.warnNotMatchingExisting)(from.modelName, (0, utils_1.getName)(cl), 'existingConnection');
    }
    if (mergedOptions.existingMongoose && mergedOptions.existingMongoose !== from.base) {
        (0, utils_1.warnNotMatchingExisting)(from.modelName, (0, utils_1.getName)(cl), 'existingMongoose');
    }
    const sch = buildSchema(cl, mergedOptions);
    const mergeHooks = mergedOptions.options?.enableMergeHooks ?? false;
    // Note: this option is not actually for "merging plugins", but if "true" it will *overwrite* all plugins with the base-schema's
    const mergePlugins = mergedOptions.options?.enableMergePlugins ?? false;
    const discriminatorKey = sch.get('discriminatorKey');
    if (!!discriminatorKey && sch.path(discriminatorKey)) {
        sch.paths[discriminatorKey].options.$skipDiscriminatorCheck = true;
    }
    const compiledModel = from.discriminator(name, sch, {
        value: value ? value : name,
        mergeHooks,
        mergePlugins,
    });
    return addModelToTypegoose(compiledModel, cl, {
        disableCaching: mergedOptions.options?.disableCaching,
    });
}
exports.getDiscriminatorModelForClass = getDiscriminatorModelForClass;
/**
 * Use this class if raw mongoose for a path is wanted
 * It is still recommended to use the typegoose classes directly
 * @see Using `Passthrough`, the paths created will also result as an `Schema` (since mongoose 6.0), see {@link https://github.com/Automattic/mongoose/issues/7181 Mongoose#7181}
 * @example
 * ```ts
 * class Dummy {
 *   @prop({ type: () => new Passthrough({ somePath: String }) })
 *   public somepath: { somePath: string };
 * }
 *
 * class Dummy {
 *   @prop({ type: () => new Passthrough({ somePath: String }, true) })
 *   public somepath: { somePath: string };
 * }
 * ```
 */
class Passthrough {
    /**
     * Use this like `new mongoose.Schema()`
     * @param raw The Schema definition
     * @param direct Directly insert "raw", instead of using "type" (this will not apply any other inner options)
     */
    constructor(raw, direct) {
        this.raw = raw;
        this.direct = direct ?? false;
    }
}
exports.Passthrough = Passthrough;
//# sourceMappingURL=data:application/json;base64,